# Importamos las librerias mínimas necesarias
from os import name
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import dash
#import dash_core_components as dcc
#import dash_html_components as html
from dash import html
from dash import dcc
from dash.dependencies import Input, Output, State
import logging
from plotly.subplots import make_subplots
import plotly.express as px
import base64
import plotly.io as pio
from joblib import load

import matplotlib.pyplot as plt
# import seaborn as sns
import re
# import tensorflow as tf
from joblib import load

app = dash.Dash()
server = app.server

from transformers import AutoTokenizer, AutoModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("mrm8488/distilroberta-finetuned-financial-news-sentiment-analysis")
model = AutoModelForSequenceClassification.from_pretrained("mrm8488/distilroberta-finetuned-financial-news-sentiment-analysis")

def softmax(x):
    """Compute softmax values for each sets of scores in x."""
    e_x = np.exp(x - np.max(x, axis=1)[:, None])
    return e_x / np.sum(e_x, axis=1)[:, None]

def sentiment_analysis(text_payload):
    try:
        inputs = tokenizer(text_payload, return_tensors="pt")["input_ids"]
        logits = model(inputs).logits
        return softmax(np.array(logits.detach()))[0]
    except:
        return [1/3,1/3,1/3]

app.layout = html.Div([
    html.Div(
        [
            html.H1( # Primera fila
                children = [
                    'Sentiment Analysis of Bank Statement'
                    #"""
                ],
                id = "titulo",
                style = {  # Aquí aplico todo lo que necesite de CSS
                    "text-align": "center", # Alineo el texto al centro
                    "font-size": "50px",
                    "font-weight": "bold",
                    "-webkit-text-fill-color": "transparent",
                    "text-fill-color": "transparent",
                    "-webkit-background-clip": "text",
                    "background-clip": "text",
                    "background-image": "linear-gradient(90deg, #2874a6 , #633974 , #b03a2e )"
                }
            )
        ],
        style={
            "width":'1000px',
            "margin":"auto",
        }
    ),
    html.Div(
        dcc.Tabs(id="tabs-styled-with-props", value='tab-1', children=[
            dcc.Tab(label='Sentence Sentiment', value='tab-1'),
            dcc.Tab(label='PDF Report', value='tab-2'),
            #dcc.Tab(label='Predicción', value='tab-3')
        ], colors={
            "primary": "#58d68d",
            #"background": "#f7dc6f",
        }),
        style={
            "font-weight": "bold",
            "font-size": "30px",
            "background-image": "linear-gradient(90deg,#58d68d,#f4d03f,#ec7063)",
            "color": "#323232",
            "margin-bottom":"100px",
        }
    ),
    html.Div(id='content-div',children=[], style={"width": '80%',
              "margin": "auto",
              "display":"flex"
              })
], 
    style={
        "font-family": '"Century Gothic", CenturyGothic, Geneva, AppleGothic, sans-serif',
        # "background-color": "#323232",
        "color": "#323232",
    }
)

@app.callback(
    Output('content-div', 'children'),
    Input('tabs-styled-with-props', 'value')
)
def change_tab(tab):
    if tab == 'tab-1':
        content = [
            dcc.Textarea(
                id='textarea-example',
                placeholder='Financial sentence...',
                style={'width': '50%', "font-size": "20px", 'height': 100},
            ),
            html.Div(id='textarea-example-output',
                    style={'whiteSpace': 'pre-line', 'width': '48%', "margin-left": "2%", 'height': 300, })
        ]
    if tab == 'tab-2':
        content = [
            dcc.Upload(
                id='upload-data',
                children=html.Div([
                    'Drag and Drop PDF or ',
                    html.A('click to Select PDF', style={'color':'#3498db','font-weight':'bold', 'cursor':'pointer', 'text-decration':'underline'})
                ]),
                style={
                    'width': '100%',
                    'height': '60px',
                    'lineHeight': '60px',
                    'borderWidth': '1px',
                    'borderStyle': 'dashed',
                    'borderRadius': '5px',
                    'textAlign': 'center',
                    'margin': '10px'
                },
                multiple=False
            ),
            html.Div(id='output-data-upload'),
        ]
    return content

@app.callback(
    Output('textarea-example-output', 'children'),
    Input('textarea-example', 'value')
)
def update_output(value):
    neg, neut, pos = sentiment_analysis(value)
    result = html.Div(children=[
        html.Div(children=[html.H3('Positive: ', style={"-webkit-text-fill-color": "transparent",
                    "text-fill-color": "transparent",
                    "-webkit-background-clip": "text",
                    "background-clip": "text",
                    "background-image": "linear-gradient(90deg,  #28b463,  #48c9b0)"}), 
                    html.H3(f'{round(float(pos),4)} %'), ], 
                    style={'width': '33%', 'float': 'left'}),
        html.Div(children=[html.H3('Neutral: ', style={"-webkit-text-fill-color": "transparent",
                    "text-fill-color": "transparent",
                    "-webkit-background-clip": "text",
                    "background-clip": "text",
                                                       "background-image": "linear-gradient(90deg, #f1c40f ,  #f8c471)"}),  html.H3(
            f'{round(float(neut),4)} %'), ], style={'width': '33%', 'float': 'left'}),
        html.Div(children=[html.H3('Negative: ', style={"-webkit-text-fill-color": "transparent",
                    "text-fill-color": "transparent",
                    "-webkit-background-clip": "text",
                    "background-clip": "text",
                    "background-image": "linear-gradient(90deg,  #c0392b,  #ec7063)"}), html.H3(
            f'{round(float(neg),4)} %'), ], style={'width': '33%', 'float': 'left'}),
    ])
    return result

if __name__ == '__main__':
    app.run_server()
